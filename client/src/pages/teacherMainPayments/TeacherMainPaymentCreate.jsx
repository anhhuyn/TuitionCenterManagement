import React, { useState } from "react";
import {
  CCard,
  CCardHeader,
  CCardBody,
  CForm,
  CFormInput,
  CFormSelect,
  CButton,
  CSpinner,
  CAlert,
} from "@coreui/react";
import { createTeacherPayments } from "../../util/api";

const TeacherPaymentCreate = () => {
  const [month, setMonth] = useState(new Date().getMonth() + 1);
  const [year, setYear] = useState(new Date().getFullYear());
  const [notes, setNotes] = useState("");
  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState(null);

const handleCreate = async (e) => {
  e.preventDefault();
  setLoading(true);
  setMessage(null);

  try {
    const res = await createTeacherPayments({ month, year, notes });
    console.log("üì¶ API response:", res);

    if (res.errCode === 0) {
      // ‚úÖ Th√†nh c√¥ng
      setMessage({
        type: "success",
        text: `T·∫°o b·∫£ng l∆∞∆°ng th√°ng ${month}/${year} th√†nh c√¥ng!`,
      });
      setNotes("");
    } else if (res.errCode === 409) {
      // ‚ö†Ô∏è Tr√πng b·∫£ng l∆∞∆°ng
      setMessage({
        type: "warning",
        text: res.message || `B·∫£ng l∆∞∆°ng th√°ng ${month}/${year} ƒë√£ ƒë∆∞·ª£c t·∫°o tr∆∞·ªõc ƒë√≥!`,
      });
    } else {
      // ‚ùå L·ªói kh√°c
      setMessage({
        type: "danger",
        text: res.message || "Kh√¥ng th·ªÉ t·∫°o b·∫£ng l∆∞∆°ng! Vui l√≤ng th·ª≠ l·∫°i sau.",
      });
    }
  } catch (err) {
    console.error("‚ùå L·ªói khi g·ªçi API t·∫°o b·∫£ng l∆∞∆°ng:", err);

    if (err.response) {
      setMessage({
        type: "danger",
        text: err.response.data?.message || "L·ªói server!",
      });
    } else {
      setMessage({
        type: "danger",
        text: "Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi server!",
      });
    }
  } finally {
    setLoading(false);
    setTimeout(() => setMessage(null), 5000);
  }
};



  return (
    <CCard>
      <CCardHeader className="bg-warning text-white">
        T·∫°o b·∫£ng l∆∞∆°ng gi√°o vi√™n
      </CCardHeader>
      <CCardBody>
        <CForm onSubmit={handleCreate}>
          <CFormSelect
            label="Th√°ng"
            value={month}
            onChange={(e) => setMonth(e.target.value)}
          >
            {Array.from({ length: 12 }, (_, i) => (
              <option key={i + 1} value={i + 1}>
                Th√°ng {i + 1}
              </option>
            ))}
          </CFormSelect>

          <CFormSelect
            label="NƒÉm"
            value={year}
            className="mt-2"
            onChange={(e) => setYear(e.target.value)}
          >
            {Array.from({ length: 5 }, (_, i) => {
              const y = new Date().getFullYear() - i;
              return (
                <option key={y} value={y}>
                  NƒÉm {y}
                </option>
              );
            })}
          </CFormSelect>

          <CFormInput
            label="Ghi ch√∫"
            value={notes}
            onChange={(e) => setNotes(e.target.value)}
            className="mt-2"
          />

          <CButton
            type="submit"
            color="primary"
            className="mt-3"
            disabled={loading}
          >
            {loading ? <CSpinner size="sm" /> : "T·∫°o b·∫£ng l∆∞∆°ng"}
          </CButton>
        </CForm>

        {message && (
          <CAlert color={message.type} className="mt-3 text-center fw-bold">
            {message.text}
          </CAlert>
        )}
      </CCardBody>
    </CCard>
  );
};

export default TeacherPaymentCreate;
