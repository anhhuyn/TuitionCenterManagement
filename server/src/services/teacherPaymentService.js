import db from "../models/index.js";
import { Op } from "sequelize";

/**
 * üß© T·∫°o m·ªõi th·ªèa thu·∫≠n l∆∞∆°ng cho gi√°o vi√™n theo m√¥n
 */
const createTeacherSubject = async (data) => {
  const { teacherId, subjectId, salaryRate } = data;

  if (!teacherId || !subjectId || !salaryRate) {
    throw new Error("Thi·∫øu d·ªØ li·ªáu b·∫Øt bu·ªôc (teacherId, subjectId, salaryRate)");
  }

  // 1. ‚úÖ KI·ªÇM TRA TR√ôNG L·∫∂P:
  const existingRecord = await db.TeacherSubject.findOne({
    where: {
      teacherId: teacherId,
      subjectId: subjectId,
    },
  });

  if (existingRecord) {
    // N·∫øu t√¨m th·∫•y, n√©m ra l·ªói
    throw new Error("Th·ªèa thu·∫≠n ƒë√£ t·ªìn t·∫°i! Gi√°o vi√™n n√†y ƒë√£ ƒë∆∞·ª£c ph√¢n c√¥ng d·∫°y m√¥n h·ªçc n√†y.");
  }

  // 2. T·∫°o m·ªõi n·∫øu kh√¥ng tr√πng l·∫∑p
  const record = await db.TeacherSubject.create({
    teacherId,
    subjectId,
    salaryRate,
  });

  return record;
};

const updateTeacherSubject = async (id, newData) => {
    const record = await db.TeacherSubject.findByPk(id);
    if (!record) throw new Error("Kh√¥ng t√¨m th·∫•y th·ªèa thu·∫≠n");

    const { teacherId, subjectId } = newData;

    // 1. KI·ªÇM TRA TR√ôNG L·∫∂P N·∫æU NG∆Ø·ªúI D√ôNG C·∫¨P NH·∫¨T C√ÅC KH√ìA NGO·∫†I (teacherId, subjectId)
    // Ch·ªâ c·∫ßn ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng truy·ªÅn l√™n teacherId HO·∫∂C subjectId.
    if (teacherId || subjectId) {
        // Gi√° tr·ªã m·ªõi ho·∫∑c gi·ªØ nguy√™n gi√° tr·ªã c≈©
        const newTeacherId = teacherId ? Number(teacherId) : record.teacherId;
        const newSubjectId = subjectId ? Number(subjectId) : record.subjectId;

        // N·∫øu c·∫∑p m·ªõi kh√°c c·∫∑p c≈©, v√† ng∆∞·ªùi d√πng ƒë√£ c·ªë g·∫Øng thay ƒë·ªïi kh√≥a
        if (newTeacherId !== record.teacherId || newSubjectId !== record.subjectId) {
            const existingRecord = await db.TeacherSubject.findOne({
                where: {
                    teacherId: newTeacherId,
                    subjectId: newSubjectId,
                    // Lo·∫°i tr·ª´ ch√≠nh b·∫£n ghi ƒëang ƒë∆∞·ª£c c·∫≠p nh·∫≠t
                    id: { [Op.ne]: id }, 
                },
            });

            if (existingRecord) {
                throw new Error("C·∫∑p Gi√°o vi√™n - M√¥n h·ªçc n√†y ƒë√£ t·ªìn t·∫°i trong th·ªèa thu·∫≠n kh√°c. Vui l√≤ng ch·ªçn c·∫∑p kh√°c.");
            }
        }
    }

    // 2. C·∫≠p nh·∫≠t b·∫£n ghi
    await record.update(newData);
    return record;
};

/**
 * üß© X√≥a th·ªèa thu·∫≠n theo ID
 */
/**
 * üß© X√≥a th·ªèa thu·∫≠n theo ID
 */
const deleteTeacherSubject = async (id) => {
  if (!id || isNaN(Number(id))) {
    throw new Error("ID kh√¥ng h·ª£p l·ªá.");
  }

  const record = await db.TeacherSubject.findByPk(id);

  if (!record) {
    throw new Error("Kh√¥ng t√¨m th·∫•y th·ªèa thu·∫≠n c·∫ßn x√≥a.");
  }

  try {
    await record.destroy();
    return { 
      message: "X√≥a th·ªèa thu·∫≠n l∆∞∆°ng th√†nh c√¥ng.",
      deletedId: id 
    };
  } catch (error) {
    console.error("‚ùå L·ªói khi x√≥a th·ªèa thu·∫≠n:", error);
    throw new Error("ƒê√£ x·∫£y ra l·ªói khi x√≥a th·ªèa thu·∫≠n l∆∞∆°ng.");
  }
};

/**
 * üß© L·∫•y danh s√°ch t·∫•t c·∫£ th·ªèa thu·∫≠n l∆∞∆°ng
 * Cho ph√©p tr√πng t√™n gi√°o vi√™n (v√¨ 1 gv c√≥ th·ªÉ d·∫°y nhi·ªÅu m√¥n)
 */
const getAllTeacherSubjects = async () => {
  const list = await db.TeacherSubject.findAll({
    include: [
      {
        model: db.Teacher,
        include: [
          {
            model: db.User,
            as: "userInfo",
            attributes: ["fullName", "email", "image"], // ‚úÖ th√™m avatar
          },
        ],
        attributes: ["id", "dateOfBirth", "specialty"],
      },
      {
        model: db.Subject,
        attributes: ["id", "name", "grade"],
      },
    ],
    order: [["createdAt", "DESC"]],
  });

  return list.map((ts) => ({
    id: ts.id,
    teacherId: ts.teacherId,
    teacherName: ts.Teacher?.userInfo?.fullName || "Kh√¥ng r√µ",
    email: ts.Teacher?.userInfo?.email || "",
    dateOfBirth: ts.Teacher?.dateOfBirth,
    specialty: ts.Teacher?.specialty,
    subjectName: ts.Subject?.name,
    grade: ts.Subject?.grade,
    salaryRate: `${Number(ts.salaryRate).toLocaleString("vi-VN")} VNƒê/gi·ªù`,
    createdAt: new Date(ts.createdAt).toLocaleString("vi-VN"),
    // ‚úÖ th√™m ·∫£nh gi√°o vi√™n (n·∫øu c√≥)
    teacherAvatar: ts.Teacher?.userInfo?.image
        ? `${process.env.BASE_URL || "http://localhost:8088"}${ts.Teacher.userInfo.image.startsWith('/') ? '' : '/'}${ts.Teacher.userInfo.image}`
        : null,

  }));
};

/**
 * üß© L·∫•y chi ti·∫øt 1 th·ªèa thu·∫≠n theo ID
 */
const getTeacherSubjectById = async (id) => {
  const record = await db.TeacherSubject.findByPk(id, {
    include: [
      {
        model: db.Teacher,
        include: [
          {
            model: db.User,
            as: "userInfo",
            attributes: ["fullName", "email", "image"],
          },
        ],
        attributes: ["dateOfBirth", "specialty"],
      },
      {
        model: db.Subject,
        attributes: ["name", "grade"],
      },
    ],
  });

  if (!record) throw new Error("Kh√¥ng t√¨m th·∫•y th·ªèa thu·∫≠n");

  // ‚úÖ D√πng record thay v√¨ ts (ts kh√¥ng t·ªìn t·∫°i trong h√†m)
  const baseUrl = process.env.BASE_URL || "http://localhost:8088";

  return {
    id: record.id,
    teacherId: record.teacherId,
    subjectId: record.subjectId,
    teacherName: record.Teacher?.userInfo?.fullName || "Kh√¥ng r√µ",
    email: record.Teacher?.userInfo?.email || "",
    dateOfBirth: record.Teacher?.dateOfBirth || null,
    specialty: record.Teacher?.specialty || "",
    subjectName: record.Subject?.name || "",
    grade: record.Subject?.grade || "",
    salaryRate: `${Number(record.salaryRate).toLocaleString("vi-VN")} VNƒê/gi·ªù`,
    createdAt: new Date(record.createdAt).toLocaleString("vi-VN"),
    teacherAvatar: record.Teacher?.userInfo?.image
      ? `${baseUrl}${record.Teacher.userInfo.image.startsWith("/") ? "" : "/"}${record.Teacher.userInfo.image}`
      : null,
  };
};


export default {
  createTeacherSubject,
  updateTeacherSubject,
  deleteTeacherSubject,
  getAllTeacherSubjects,
  getTeacherSubjectById,
};
