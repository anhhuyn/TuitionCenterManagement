import db from "../models/index.js";
import { Op } from "sequelize";
/**
 * Sinh ra c√°c bu·ªïi h·ªçc (Session) d·ª±a tr√™n startDate ‚Üí endDate
 * B·ªè qua c√°c session ƒë√£ b·∫Øt ƒë·∫ßu n·∫øu l√† h√¥m nay
 * Kh√¥ng t·∫°o tr√πng c√πng scheduleId, sessionDate v√† startTime
 * @param {Object} schedule - SubjectSchedule instance
 */
const generateSessionsForSchedule = async (schedule) => {
  if (!schedule.startDate) throw new Error("Schedule must have startDate");

  const sessionsToCreate = [];
  const now = new Date(); // th·ªùi gian hi·ªán t·∫°i

  // Format startTime & endTime chu·∫©n HH:MM:SS
  const formatTime = (timeStr) => timeStr.length === 5 ? timeStr + ":00" : timeStr;
  const startTimeStr = formatTime(schedule.startTime);
  const endTimeStr = formatTime(schedule.endTime);

  const start = new Date(schedule.startDate);
  const end = schedule.endDate ? new Date(schedule.endDate) : new Date(start);
  let currentDate = new Date(start);

  while (currentDate <= end) {
    // Ki·ªÉm tra ng√†y trong tu·∫ßn c√≥ tr√πng v·ªõi dayOfWeek
    if (currentDate.getDay() === schedule.dayOfWeek) {
      const sessionDateStr = currentDate.toISOString().split("T")[0];

      // T·∫°o datetime ƒë·∫ßy ƒë·ªß cho session
      const [hour, minute] = startTimeStr.split(":");
      const sessionDateTime = new Date(currentDate);
      sessionDateTime.setHours(hour, minute, 0, 0);

      // B·ªè qua n·∫øu session h√¥m nay ƒë√£ b·∫Øt ƒë·∫ßu
      if (sessionDateTime <= now) {
        currentDate.setDate(currentDate.getDate() + 1);
        continue;
      }

      // Ki·ªÉm tra session ƒë√£ t·ªìn t·∫°i ch∆∞a
      const exists = await db.Session.findOne({
        where: {
          subjectId: schedule.subjectId,
          sessionDate: sessionDateStr,
          startTime: startTimeStr
        }
      });

      if (!exists) {
        sessionsToCreate.push({
          subjectId: schedule.subjectId,
          scheduleId: schedule.id,
          sessionDate: sessionDateStr,
          startTime: startTimeStr,
          endTime: endTimeStr,
          roomId: schedule.roomId,
          status: "scheduled",
          createdAt: new Date(),
          updatedAt: new Date(),
        });
      }
    }
    currentDate.setDate(currentDate.getDate() + 1);
  }

  if (sessionsToCreate.length > 0) {
    await db.Session.bulkCreate(sessionsToCreate);
  }

  return sessionsToCreate;
};

/**
 * T·∫°o l·ªãch h·ªçc m·ªõi v√† sinh session
 */
const createSubjectSchedule = async ({ subjectId, dayOfWeek, startTime, endTime, roomId, startDate, endDate }) => {
  // Format startTime chu·∫©n HH:MM:SS
  const formatTime = (timeStr) => timeStr.length === 5 ? timeStr + ":00" : timeStr;
  const startTimeStr = formatTime(startTime);

  // Ki·ªÉm tra schedule ƒë√£ t·ªìn t·∫°i ch∆∞a (c√πng subjectId, dayOfWeek, startTime, roomId)
  let schedule = await db.SubjectSchedule.findOne({
    where: {
      subjectId,
      dayOfWeek,
      startTime: startTimeStr,
      roomId
    }
  });

  // N·∫øu ch∆∞a t·ªìn t·∫°i th√¨ t·∫°o m·ªõi
  if (!schedule) {
    schedule = await db.SubjectSchedule.create({
      subjectId,
      dayOfWeek,
      startTime: startTimeStr,
      endTime,
      roomId,
      startDate,
      endDate,
    });
  }

  // Sinh session t·ª± ƒë·ªông
  const sessions = await generateSessionsForSchedule(schedule);

  return { schedule, sessions };
};

/**
 * L·∫•y t·∫•t c·∫£ session theo subjectId ƒë·ªÉ hi·ªÉn th·ªã th·ªùi kh√≥a bi·ªÉu
 */
const getScheduleBySubjectId = async (subjectId) => {
  if (!subjectId) throw new Error("subjectId is required");

  const sessions = await db.Session.findAll({
    where: { subjectId },
    include: [
      { model: db.Room, attributes: ['name'] },
      { model: db.SubjectSchedule, attributes: ['dayOfWeek', 'startTime', 'endTime'] }
    ],
    order: [
      ['sessionDate', 'ASC'],
      ['startTime', 'ASC']
    ]
  });

  return sessions;
};

/**
 * T·∫°o m·ªôt session th·ªß c√¥ng
 */
const addManualSession = async ({ subjectId, scheduleId, sessionDate, startTime, endTime, roomId, status }) => {
  if (!subjectId || !sessionDate || !startTime || !endTime) {
    throw new Error("Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc ƒë·ªÉ t·∫°o session");
  }

  // Format time n·∫øu c·∫ßn
  const formatTime = (timeStr) => (timeStr.length === 5 ? timeStr + ":00" : timeStr);
  const startTimeStr = formatTime(startTime);
  const endTimeStr = formatTime(endTime);

  // ===== KI·ªÇM TRA H·ª¢P L·ªÜ V·ªÄ TH·ªúI GIAN =====
  const today = new Date();
  const sessionDateTime = new Date(`${sessionDate}T${startTimeStr}`);
  const endDateTime = new Date(`${sessionDate}T${endTimeStr}`);

  // N·∫øu bu·ªïi h·ªçc l√† h√¥m nay m√† gi·ªù b·∫Øt ƒë·∫ßu < hi·ªán t·∫°i ‚Üí l·ªói
  const isSameDay =
    sessionDateTime.getFullYear() === today.getFullYear() &&
    sessionDateTime.getMonth() === today.getMonth() &&
    sessionDateTime.getDate() === today.getDate();

  if (isSameDay && sessionDateTime <= today) {
    throw new Error("Gi·ªù b·∫Øt ƒë·∫ßu kh√¥ng h·ª£p l·ªá (ƒë√£ tr√¥i qua so v·ªõi hi·ªán t·∫°i)");
  }

  // N·∫øu gi·ªù k·∫øt th√∫c nh·ªè h∆°n gi·ªù b·∫Øt ƒë·∫ßu ‚Üí l·ªói
  if (endDateTime <= sessionDateTime) {
    throw new Error("Gi·ªù k·∫øt th√∫c ph·∫£i sau gi·ªù b·∫Øt ƒë·∫ßu");
  }

  // ===== KI·ªÇM TRA TR√ôNG L·∫∂P / CH·ªíNG GI·ªú =====

  // 1Ô∏è. Ki·ªÉm tra tr√πng gi·ªù c√πng ph√≤ng
  const overlappingRoom = await db.Session.findOne({
    where: {
      sessionDate,
      roomId,
      [Op.or]: [
        {
          startTime: { [Op.between]: [startTimeStr, endTimeStr] },
        },
        {
          endTime: { [Op.between]: [startTimeStr, endTimeStr] },
        },
      ],
    },
  });

  if (overlappingRoom) {
    throw new Error(
      `Ph√≤ng n√†y ƒë√£ c√≥ bu·ªïi kh√°c (${overlappingRoom.startTime} - ${overlappingRoom.endTime}) trong c√πng ng√†y`
    );
  }

  // 2Ô∏è. Ki·ªÉm tra tr√πng gi·ªù c√πng l·ªõp (subject)
  const overlappingSubject = await db.Session.findOne({
    where: {
      sessionDate,
      subjectId,
      [Op.or]: [
        {
          startTime: { [Op.between]: [startTimeStr, endTimeStr] },
        },
        {
          endTime: { [Op.between]: [startTimeStr, endTimeStr] },
        },
      ],
    },
  });

  if (overlappingSubject) {
    throw new Error(
      `L·ªõp h·ªçc n√†y ƒë√£ c√≥ bu·ªïi kh√°c (${overlappingSubject.startTime} - ${overlappingSubject.endTime}) v√†o c√πng ng√†y`
    );
  }

  // =====  T·∫†O M·ªöI BU·ªîI H·ªåC =====
  const newSession = await db.Session.create({
    subjectId,
    scheduleId: scheduleId || null,
    sessionDate,
    startTime: startTimeStr,
    endTime: endTimeStr,
    roomId: roomId || null,
    status: status || "scheduled",
  });

  return newSession;
};

/**
 * Xo√° m·ªôt bu·ªïi h·ªçc theo sessionId
 */
const deleteSession = async (sessionId) => {
  if (!sessionId) {
    throw new Error("Thi·∫øu sessionId ƒë·ªÉ xo√°");
  }

  const session = await db.Session.findByPk(sessionId);

  if (!session) {
    throw new Error("Bu·ªïi h·ªçc kh√¥ng t·ªìn t·∫°i");
  }

  await session.destroy();

  return { message: "ƒê√£ xo√° bu·ªïi h·ªçc th√†nh c√¥ng", id: sessionId };
};

/**
 * Ch·ªânh s·ª≠a th√¥ng tin m·ªôt bu·ªïi h·ªçc (session)
 * @param {Object} params - C√°c th√¥ng tin c·∫ßn ch·ªânh s·ª≠a
 * @param {string} params.sessionId - ID bu·ªïi h·ªçc c·∫ßn ch·ªânh s·ª≠a (b·∫Øt bu·ªôc)
 * @param {string} [params.sessionDate] - Ng√†y bu·ªïi h·ªçc (YYYY-MM-DD)
 * @param {string} [params.startTime] - Gi·ªù b·∫Øt ƒë·∫ßu (HH:MM ho·∫∑c HH:MM:SS)
 * @param {string} [params.endTime] - Gi·ªù k·∫øt th√∫c (HH:MM ho·∫∑c HH:MM:SS)
 * @param {number} [params.roomId] - ID ph√≤ng h·ªçc
 * @param {string} [params.status] - Tr·∫°ng th√°i (scheduled, completed, canceled)
 */
const updateSession = async ({
  sessionId,
  sessionDate,
  startTime,
  endTime,
  roomId,
  status,
}) => {
  if (!sessionId) throw new Error("Thi·∫øu sessionId ƒë·ªÉ ch·ªânh s·ª≠a");

  const session = await db.Session.findByPk(sessionId);
  if (!session) throw new Error("Bu·ªïi h·ªçc kh√¥ng t·ªìn t·∫°i");

  // Chu·∫©n h√≥a ƒë·ªãnh d·∫°ng gi·ªù HH:MM ‚Üí HH:MM:SS
  const formatTime = (timeStr) =>
    timeStr && timeStr.length === 5 ? timeStr + ":00" : timeStr;

  // D·ªØ li·ªáu m·ªõi (n·∫øu kh√¥ng truy·ªÅn th√¨ gi·ªØ nguy√™n)
  const newSessionDate = sessionDate || session.sessionDate;
  const newStartTime = formatTime(startTime || session.startTime);
  const newEndTime = formatTime(endTime || session.endTime);
  const newRoomId = roomId !== undefined ? roomId : session.roomId;
  const newStatus = status || session.status;

  // === KI·ªÇM TRA H·ª¢P L·ªÜ C∆† B·∫¢N ===
  const today = new Date();
  const sessionDateTime = new Date(`${newSessionDate}T${newStartTime}`);
  const endDateTime = new Date(`${newSessionDate}T${newEndTime}`);

  if (endDateTime <= sessionDateTime) {
    throw new Error("Gi·ªù k·∫øt th√∫c ph·∫£i sau gi·ªù b·∫Øt ƒë·∫ßu");
  }

  // === PH√ÇN BI·ªÜT BU·ªîI H·ªåC QU√Å KH·ª® & T∆Ø∆†NG LAI ===
  const isPastSession = sessionDateTime < today;

  // üî∏ N·∫øu bu·ªïi h·ªçc trong t∆∞∆°ng lai ‚Üí v·∫´n c·∫ßn ki·ªÉm tra tr√πng gi·ªù
  if (!isPastSession) {
    // Ki·ªÉm tra tr√πng gi·ªù c√πng ph√≤ng (ngo·∫°i tr·ª´ ch√≠nh n√≥)
    const overlappingRoom = await db.Session.findOne({
      where: {
        id: { [Op.ne]: sessionId },
        sessionDate: newSessionDate,
        roomId: newRoomId,
        [Op.or]: [
          { startTime: { [Op.between]: [newStartTime, newEndTime] } },
          { endTime: { [Op.between]: [newStartTime, newEndTime] } },
        ],
      },
    });

    if (overlappingRoom) {
      throw new Error(
        `Ph√≤ng n√†y ƒë√£ c√≥ bu·ªïi kh√°c (${overlappingRoom.startTime} - ${overlappingRoom.endTime}) trong c√πng ng√†y`
      );
    }

    // Ki·ªÉm tra tr√πng gi·ªù c√πng l·ªõp (subject)
    const overlappingSubject = await db.Session.findOne({
      where: {
        id: { [Op.ne]: sessionId },
        sessionDate: newSessionDate,
        subjectId: session.subjectId,
        [Op.or]: [
          { startTime: { [Op.between]: [newStartTime, newEndTime] } },
          { endTime: { [Op.between]: [newStartTime, newEndTime] } },
        ],
      },
    });

    if (overlappingSubject) {
      throw new Error(
        `L·ªõp h·ªçc n√†y ƒë√£ c√≥ bu·ªïi kh√°c (${overlappingSubject.startTime} - ${overlappingSubject.endTime}) v√†o c√πng ng√†y`
      );
    }
  } else {
    console.warn(
      "C·∫£nh b√°o: Bu·ªïi h·ªçc ƒë√£ tr√¥i qua ‚Äî b·ªè qua ki·ªÉm tra tr√πng gi·ªù, nh∆∞ng v·∫´n ki·ªÉm tra logic gi·ªù h·ªçc."
    );
  }

  // === C·∫¨P NH·∫¨T D·ªÆ LI·ªÜU ===
  session.sessionDate = newSessionDate;
  session.startTime = newStartTime;
  session.endTime = newEndTime;
  session.roomId = newRoomId;
  session.status = newStatus;

  await session.save();

  return session;
};

const getSessionById = async (sessionId) => {
  const session = await db.Session.findByPk(sessionId, {
    include: [
      { model: db.Room, attributes: ['name'] },
      { model: db.SubjectSchedule, attributes: ['dayOfWeek', 'startTime', 'endTime'] }
    ]
  });
  if (!session) throw new Error("Session kh√¥ng t·ªìn t·∫°i");
  return session;
};

export default {
  getSessionById,
  updateSession,
  deleteSession,
  createSubjectSchedule,
  getScheduleBySubjectId,
  addManualSession
};
