import db from "../models/index.js";
import { Op, Sequelize } from "sequelize";
import dayjs from "dayjs";

/**
 * T√≠nh l∆∞∆°ng gi√°o vi√™n trong 1 th√°ng
 * @param {Number} month - Th√°ng c·∫ßn t√≠nh l∆∞∆°ng (1-12)
 * @param {Number} year - NƒÉm c·∫ßn t√≠nh l∆∞∆°ng
 * @returns Danh s√°ch gi√°o vi√™n c√πng t·ªïng ti·ªÅn v√† chi ti·∫øt t·ª´ng m√¥n
 */
export const calculateTeacherSalaryByMonth = async (month, year) => {
  try {
    // X√°c ƒë·ªãnh kho·∫£ng th·ªùi gian c·ªßa th√°ng ƒë√≥
    const startOfMonth = dayjs(`${year}-${month}-01`).startOf("month").toDate();
    const endOfMonth = dayjs(`${year}-${month}-01`).endOf("month").toDate();

    // L·∫•y to√†n b·ªô gi√°o vi√™n c√≥ m√¥n gi·∫£ng d·∫°y
    const teachers = await db.Teacher.findAll({
      include: [
        {
          model: db.User,
          as: "userInfo",
          attributes: ["fullName", "email", "phoneNumber"],
          where: { roleId: "R1" },
        },
        {
          model: db.TeacherSubject,
          include: [
            {
              model: db.Subject,
              where: { status: "active" }, // ch·ªâ m√¥n ƒëang ho·∫°t ƒë·ªông
              attributes: ["id", "name", "status"],
            },
          ],
        },
      ],
    });

    const result = [];

    for (const teacher of teachers) {
      const teacherData = {
        teacherId: teacher.id,
        fullName: teacher.userInfo?.fullName,
        email: teacher.userInfo?.email,
        phoneNumber: teacher.userInfo?.phoneNumber,
        subjects: [],
        totalAmount: 0,
      };

      // Duy·ªát qua t·ª´ng m√¥n gi√°o vi√™n ƒë√≥ d·∫°y
      for (const ts of teacher.TeacherSubjects) {
        const { subjectId, salaryRate } = ts;

        // T√¨m c√°c bu·ªïi h·ªçc c·ªßa m√¥n ƒë√≥ trong th√°ng
        const sessions = await db.Session.findAll({
          where: {
            subjectId,
            status: "completed",
            sessionDate: {
              [Op.between]: [startOfMonth, endOfMonth],
            },
          },
          include: [
            {
              model: db.TeacherAttendance,
              where: {
                teacherId: teacher.id,
                status: "present",
              },
            },
          ],
        });

        let totalHours = 0;

        for (const s of sessions) {
          const start = dayjs(`${s.sessionDate} ${s.startTime}`);
          const end = dayjs(`${s.sessionDate} ${s.endTime}`);
          const duration = end.diff(start, "minute") / 60; // quy ƒë·ªïi ra gi·ªù
          totalHours += duration;
        }

        const totalMoney = totalHours * parseFloat(salaryRate);

        teacherData.subjects.push({
          subjectId: ts.Subject.id,
          subjectName: ts.Subject.name,
          salaryRate,
          totalSessions: sessions.length,
          totalHours,
          totalMoney,
        });

        teacherData.totalAmount += totalMoney;
      }

      result.push(teacherData);
    }

    return result;
  } catch (error) {
    console.error("L·ªói khi t√≠nh l∆∞∆°ng gi√°o vi√™n:", error);
    throw new Error("Kh√¥ng th·ªÉ t√≠nh l∆∞∆°ng gi√°o vi√™n");
  }
};

/**
 * L∆∞u l∆∞∆°ng gi√°o vi√™n v√†o b·∫£ng TeacherPayment
 */
export const createTeacherPayments = async (month, year, notes = "") => {
  try {
    // üîç Ki·ªÉm tra xem th√°ng/nƒÉm ƒë√≥ ƒë√£ c√≥ b·∫£ng l∆∞∆°ng ch∆∞a
    const existingPayments = await db.TeacherPayment.findAll({
      where: {
        notes: { [Op.like]: `%L∆∞∆°ng th√°ng ${month}/${year}%` },
      },
    });

    if (existingPayments.length > 0) {
      return {
        errCode: 1,
        message: `B·∫£ng l∆∞∆°ng cho th√°ng ${month}/${year} ƒë√£ ƒë∆∞·ª£c t·∫°o tr∆∞·ªõc ƒë√≥.`,
      };
    }

    // T√≠nh l∆∞∆°ng
    const salaries = await calculateTeacherSalaryByMonth(month, year);
    const payments = [];

    // T·∫°o t·ª´ng b·∫£ng l∆∞∆°ng
    for (const teacher of salaries) {
      const newPayment = await db.TeacherPayment.create({
        teacherId: teacher.teacherId,
        amount: teacher.totalAmount,
        paymentDate: new Date(),
        status: "unpaid",
        notes: `L∆∞∆°ng th√°ng ${month}/${year}. ${notes}`,
      });

      // üíæ Th√™m chi ti·∫øt l∆∞∆°ng theo m√¥n
      for (const subj of teacher.subjects) {
        await db.TeacherPaymentDetail.create({
          paymentId: newPayment.id,
          subjectId: subj.subjectId,
          totalHours: subj.totalHours,
          totalSessions: subj.totalSessions,
          salaryRate: subj.salaryRate,
          totalMoney: subj.totalMoney,
        });
      }

      payments.push(newPayment);
    }

    return {
      errCode: 0,
      message: `‚úÖ T·∫°o th√†nh c√¥ng b·∫£ng l∆∞∆°ng cho th√°ng ${month}/${year} (${payments.length} gi√°o vi√™n).`,
      data: payments,
    };
  } catch (error) {
    console.error("L·ªói khi t·∫°o b·∫£ng l∆∞∆°ng:", error);
    return {
      errCode: 2,
      message: "‚ùå C√≥ l·ªói x·∫£y ra khi t·∫°o b·∫£ng l∆∞∆°ng.",
      error: error.message,
    };
  }
};


export const payTeacherSalary = async (teacherId, month, year) => {
  try {
    if (!teacherId || !month || !year) {
      return { errCode: 1, message: "Thi·∫øu teacherId, month ho·∫∑c year!" };
    }

    const payment = await db.TeacherPayment.findOne({
      where: {
        teacherId,
        notes: { [Op.like]: `%L∆∞∆°ng th√°ng ${month}/${year}%` },
      },
    });

    if (!payment) {
      return { errCode: 2, message: "Kh√¥ng t√¨m th·∫•y b·∫£ng l∆∞∆°ng!" };
    }

    if (payment.status === "paid") {
      return { errCode: 3, message: "B·∫£ng l∆∞∆°ng ƒë√£ ƒë∆∞·ª£c thanh to√°n!" };
    }

    payment.status = "paid";
    payment.paymentDate = new Date();
    await payment.save();

    return { errCode: 0, message: "Thanh to√°n th√†nh c√¥ng!", data: payment };
  } catch (error) {
    console.error("‚ùå L·ªói khi thanh to√°n l∆∞∆°ng:", error);
    return { errCode: 500, message: "L·ªói server khi thanh to√°n l∆∞∆°ng gi√°o vi√™n!" };
  }
};

export const getTeacherSalaryDetail = async (teacherId, month, year) => {
  try {
    const payment = await db.TeacherPayment.findOne({
      where: {
        teacherId,
        notes: { [Op.like]: `%L∆∞∆°ng th√°ng ${month}/${year}%` },
      },
      include: [
        {
          model: db.TeacherPaymentDetail,
          include: [
            {
              model: db.Subject,
              attributes: ["name"],
            },
          ],
        },
        {
          model: db.Teacher,
          include: [
            {
              model: db.User,
              as: "userInfo",
              attributes: ["fullName", "email", "phoneNumber"],
            },
          ],
        },
      ]
    });

    if (!payment) return null;

    // ‚úÖ Gom nh√≥m theo subjectId tr∆∞·ªõc
    const subjectMap = {};

    for (const d of payment.TeacherPaymentDetails) {
      const key = d.subjectId || "no-subject";
      if (!subjectMap[key]) {
        subjectMap[key] = {
          subjectId: d.subjectId,
          subjectName: d.Subject?.name || "Kh√¥ng c√≥ m√¥n",
          salaryRate: d.salaryRate,
          totalSessions: d.totalSessions,
          totalHours: d.totalHours,
          totalMoney: d.totalMoney,
        };
      } else {
        subjectMap[key].totalSessions += d.totalSessions;
        subjectMap[key].totalHours += d.totalHours;
        subjectMap[key].totalMoney += d.totalMoney;
      }
    }

    // ‚úÖ Tr·∫£ k·∫øt qu·∫£ 1 l·∫ßn duy nh·∫•t
    return {
      teacherId: payment.teacherId,
      fullName: payment.Teacher.userInfo.fullName,
      email: payment.Teacher.userInfo.email,
      phoneNumber: payment.Teacher.userInfo.phoneNumber,
      status: payment.status,
      totalAmount: payment.amount,
      subjects: Object.values(subjectMap), // Danh s√°ch m√¥n sau khi g·ªôp
    };
  } catch (error) {
    console.error("L·ªói khi l·∫•y chi ti·∫øt l∆∞∆°ng:", error);
    throw new Error("Kh√¥ng l·∫•y ƒë∆∞·ª£c chi ti·∫øt l∆∞∆°ng gi√°o vi√™n");
  }
};