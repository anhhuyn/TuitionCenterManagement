import studentService from "../services/studentService.js";


const handleGetAllStudents = async (req, res) => {
  try {
    const {
      page = 1,
      limit = 10,
      name,
      grade,
      schoolName,
      gender,
      subject, // ‚úÖ th√™m field subject
    } = req.query;

    // G·ª≠i xu·ªëng service
    const response = await studentService.getAllStudents(
      parseInt(page),
      parseInt(limit),
      { name, grade, schoolName, gender, subject }
    );

    return res.status(200).json(response);
  } catch (error) {
    console.error("Error in handleGetAllStudents:", error);
    return res.status(500).json({
      errCode: 1,
      message: "Internal server error",
    });
  }
};
const handleCreateNewStudent = async (req, res) => {
  console.log("BODY:", req.body);
  console.log("FILE:", req.file);

  const response = await studentService.createNewStudent(req.body, req.file);
  if (response.errCode === 0) {
    return res.status(201).json(response);
  } else {
    return res.status(400).json(response);
  }
};
const handleUpdateStudent = async (req, res) => {
  try {
    const studentId = req.params.id; // userId c·ªßa h·ªçc vi√™n
    const response = await studentService.updateStudent(
      studentId,
      req.body,
      req.file
    );
    return res.status(200).json(response);
  } catch (error) {
    console.error("Error in handleUpdateStudent:", error);
    return res.status(500).json({
      errCode: 1,
      message: "Internal server error",
    });
  }
};


// X√≥a h·ªçc vi√™n
const handleDeleteStudent = async (req, res) => {
  const id = req.params.id; // L·∫•y id t·ª´ URL
  if (!id) {
    return res.status(400).json({
      errCode: 1,
      message: "Thi·∫øu ID h·ªçc vi√™n.",
    });
  }

  try {
    const response = await studentService.deleteStudent(id);
    if (response.errCode === 0) {
      return res.status(200).json(response);
    } else {
      return res.status(400).json(response);
    }
  } catch (error) {
    console.error("Error in handleDeleteStudent:", error);
    return res.status(500).json({
      errCode: 500,
      message: "Internal server error",
    });
  }
};

// üîπ X√≥a nhi·ªÅu h·ªçc vi√™n c√πng l√∫c
const handleDeleteMultipleStudents = async (req, res) => {
  const { ids } = req.body; // FE g·ª≠i danh s√°ch userId (VD: [12, 13, 14])

  if (!Array.isArray(ids) || ids.length === 0) {
    return res.status(400).json({
      errCode: 1,
      message: "Danh s√°ch ID h·ªçc vi√™n kh√¥ng h·ª£p l·ªá!",
    });
  }

  try {
    const response = await studentService.deleteMultipleStudents(ids);
    if (response.errCode === 0) {
      return res.status(200).json(response);
    } else {
      return res.status(400).json(response);
    }
  } catch (error) {
    console.error("‚ùå Error in handleDeleteMultipleStudents:", error);
    return res.status(500).json({
      errCode: 500,
      message: "Internal server error khi x√≥a nhi·ªÅu h·ªçc vi√™n!",
    });
  }
};

const handleGetStudentById = async (req, res) => {
  try {
    const studentId = req.params.id;
    const result = await studentService.getStudentById(studentId);
    return res.status(200).json(result);
  } catch (error) {
    console.error("‚ùå L·ªói controller getStudentById:", error);
    return res.status(500).json({
      errCode: 500,
      message: "L·ªói server khi l·∫•y th√¥ng tin chi ti·∫øt h·ªçc vi√™n!",
    });
  }
};


export const handleExportStudentsExcel = async (req, res) => {
  try {
    const { name, grade, schoolName, gender } = req.query;

    const buffer = await studentService.exportStudentsToExcel({
      name,
      grade,
      schoolName,
      gender,
    });

    if (!buffer) {
      return res
        .status(404)
        .json({ errCode: 1, message: "Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t!" });
    }

    res.setHeader(
      "Content-Disposition",
      "attachment; filename=danh-sach-hoc-vien.xlsx"
    );
    res.setHeader(
      "Content-Type",
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    );

    res.send(buffer);
  } catch (e) {
    console.error("‚ùå L·ªói khi xu·∫•t Excel h·ªçc vi√™n:", e);
    res.status(500).json({ errCode: 500, message: "Xu·∫•t Excel th·∫•t b·∫°i!" });
  }
};



const getStudentsByGrade = async (req, res) => {
  try {
    const { grade } = req.params;

    if (!grade) {
      return res.status(400).json({ message: "Thi·∫øu grade" });
    }

    const students = await studentService.getStudentsByGrade(grade);

    return res.status(200).json({
      message: "L·∫•y danh s√°ch h·ªçc sinh theo kh·ªëi th√†nh c√¥ng",
      data: students,
    });
  } catch (error) {
    return res.status(500).json({
      message: "C√≥ l·ªói x·∫£y ra khi l·∫•y danh s√°ch h·ªçc sinh theo kh·ªëi",
      error: error.message,
    });
  }
};

export default {
  handleGetAllStudents,
  handleCreateNewStudent,
  handleUpdateStudent,
  handleDeleteStudent,
  handleDeleteMultipleStudents,
  handleGetStudentById,
  handleExportStudentsExcel,
  getStudentsByGrade
};
