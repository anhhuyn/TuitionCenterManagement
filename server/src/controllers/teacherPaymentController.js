import teacherSubjectService from "../services/teacherPaymentService.js";

/**
 * üß© T·∫°o m·ªõi th·ªèa thu·∫≠n l∆∞∆°ng gi·ªØa gi√°o vi√™n v√† m√¥n h·ªçc
 */
const createTeacherSubject = async (req, res) => {
  try {
    const data = await teacherSubjectService.createTeacherSubject(req.body);
    return res.status(201).json({
      message: "T·∫°o th·ªèa thu·∫≠n l∆∞∆°ng th√†nh c√¥ng",
      data,
    });
  } catch (error) {
    // üí° C·∫≠p nh·∫≠t: X·ª≠ l√Ω l·ªói c·ª• th·ªÉ (nh∆∞ tr√πng l·∫∑p, thi·∫øu d·ªØ li·ªáu)
    
    // Ki·ªÉm tra l·ªói thi·∫øu d·ªØ li·ªáu (v√≠ d·ª•: "Thi·∫øu d·ªØ li·ªáu b·∫Øt bu·ªôc...")
    if (error.message.includes("Thi·∫øu d·ªØ li·ªáu")) {
        return res.status(400).json({ // 400 Bad Request
            message: error.message,
        });
    }

    // Ki·ªÉm tra l·ªói tr√πng l·∫∑p (v√≠ d·ª•: "Th·ªèa thu·∫≠n ƒë√£ t·ªìn t·∫°i!...")
    if (error.message.includes("ƒë√£ t·ªìn t·∫°i")) {
        return res.status(409).json({ // 409 Conflict
            message: error.message,
        });
    }

    // M·∫∑c ƒë·ªãnh cho c√°c l·ªói kh√°c
    return res.status(400).json({ // Gi·ªØ nguy√™n 400 cho c√°c l·ªói validate chung kh√°c
      message: error.message || "Kh√¥ng th·ªÉ t·∫°o th·ªèa thu·∫≠n l∆∞∆°ng",
    });
  }
};

/**
 * üß© L·∫•y danh s√°ch t·∫•t c·∫£ th·ªèa thu·∫≠n l∆∞∆°ng
 */
const getAllTeacherSubjects = async (req, res) => {
  try {
    const data = await teacherSubjectService.getAllTeacherSubjects();
    return res.status(200).json(data);
  } catch (error) {
    return res.status(500).json({
      message: error.message || "L·ªói khi l·∫•y danh s√°ch th·ªèa thu·∫≠n l∆∞∆°ng",
    });
  }
};

/**
 * üß© L·∫•y chi ti·∫øt 1 th·ªèa thu·∫≠n theo ID
 */
const getTeacherSubjectById = async (req, res) => {
  try {
    const { id } = req.params;
    const data = await teacherSubjectService.getTeacherSubjectById(id);
    return res.status(200).json(data);
  } catch (error) {
    return res.status(404).json({
      message: error.message || "Kh√¥ng t√¨m th·∫•y th·ªèa thu·∫≠n l∆∞∆°ng n√†y",
    });
  }
};

/**
 * üß© C·∫≠p nh·∫≠t th√¥ng tin th·ªèa thu·∫≠n l∆∞∆°ng
 */
const updateTeacherSubject = async (req, res) => {
¬† try {
¬† ¬† const { id } = req.params;
¬† ¬† const data = await teacherSubjectService.updateTeacherSubject(id, req.body);
¬† ¬† return res.status(200).json({
¬† ¬† ¬† message: "C·∫≠p nh·∫≠t th·ªèa thu·∫≠n l∆∞∆°ng th√†nh c√¥ng",
¬† ¬† ¬† data,
¬† ¬† });
¬† } catch (error) {
    
    // Ki·ªÉm tra l·ªói kh√¥ng t√¨m th·∫•y (Not Found)
¬† ¬† if (error.message.includes("Kh√¥ng t√¨m th·∫•y th·ªèa thu·∫≠n")) {
¬† ¬† ¬† return res.status(404).json({ // 404 Not Found
¬† ¬† ¬† ¬† message: error.message,
¬† ¬† ¬† });
¬† ¬† }

    // Ki·ªÉm tra l·ªói tr√πng l·∫∑p (Conflict) do logic trong service ƒë√£ th√™m
¬† ¬† if (error.message.includes("ƒë√£ t·ªìn t·∫°i trong th·ªèa thu·∫≠n kh√°c")) {
¬† ¬† ¬† return res.status(409).json({ // 409 Conflict
¬† ¬† ¬† ¬† message: error.message,
¬† ¬† ¬† });
¬† ¬† }

    // M·∫∑c ƒë·ªãnh cho c√°c l·ªói validate ho·∫∑c database kh√°c
¬† ¬† return res.status(400).json({ // 400 Bad Request
¬† ¬† ¬† message: error.message || "C·∫≠p nh·∫≠t th·ªèa thu·∫≠n l∆∞∆°ng th·∫•t b·∫°i",
¬† ¬† });
¬† }
};

/**
 * üß© X√≥a th·ªèa thu·∫≠n l∆∞∆°ng theo ID
 */
/**
 * üß© X√≥a th·ªèa thu·∫≠n l∆∞∆°ng theo ID
 */
const deleteTeacherSubject = async (req, res) => {
  try {
    const { id } = req.params;

    const data = await teacherSubjectService.deleteTeacherSubject(id);

    return res.status(200).json({
      message: data.message,
      deletedId: data.deletedId,
    });
  } catch (error) {
    console.error("‚ùå L·ªói x√≥a th·ªèa thu·∫≠n:", error.message);

    if (error.message.includes("kh√¥ng h·ª£p l·ªá")) {
      return res.status(400).json({ message: error.message }); // Bad Request
    }

    if (error.message.includes("Kh√¥ng t√¨m th·∫•y")) {
      return res.status(404).json({ message: error.message }); // Not Found
    }

    return res.status(500).json({
      message: error.message || "L·ªói m√°y ch·ªß khi x√≥a th·ªèa thu·∫≠n l∆∞∆°ng.",
    });
  }
};


/**
 * üß© T√¨m ki·∫øm th·ªèa thu·∫≠n theo t√™n gi√°o vi√™n ho·∫∑c t√™n m√¥n h·ªçc
 */
const searchTeacherSubjects = async (req, res) => {
  try {
    const keyword = req.query.keyword || "";
    const data = await teacherSubjectService.searchTeacherSubjects(keyword);
    return res.status(200).json(data);
  } catch (error) {
    return res.status(500).json({
      message: error.message || "L·ªói khi t√¨m ki·∫øm th·ªèa thu·∫≠n l∆∞∆°ng",
    });
  }
};

export default {
  createTeacherSubject,
  getAllTeacherSubjects,
  getTeacherSubjectById,
  updateTeacherSubject,
  deleteTeacherSubject,
  searchTeacherSubjects,
};
