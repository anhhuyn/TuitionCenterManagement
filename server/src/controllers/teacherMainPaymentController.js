import * as teacherMainPaymentService from "../services/teacherMainPaymentService.js";
import db from "../models/index.js";
import { Op } from "sequelize";

/**
 * üìÖ L·∫•y danh s√°ch l∆∞∆°ng gi√°o vi√™n theo th√°ng & nƒÉm
 * GET /api/teacher-payments?month=10&year=2025
 */
const handleGetTeacherSalaries = async (req, res) => {
  try {
    const { month, year } = req.query;

    if (!month || !year) {
      return res.status(400).json({
        errCode: 1,
        message: "Thi·∫øu tham s·ªë th√°ng ho·∫∑c nƒÉm!",
      });
    }

    const data = await teacherMainPaymentService.calculateTeacherSalaryByMonth(
      parseInt(month),
      parseInt(year)
    );

    return res.status(200).json({
      errCode: 0,
      message: "L·∫•y danh s√°ch l∆∞∆°ng gi√°o vi√™n th√†nh c√¥ng!",
      data,
    });
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y danh s√°ch l∆∞∆°ng:", error);
    return res.status(500).json({
      errCode: 500,
      message: "L·ªói server khi l·∫•y danh s√°ch l∆∞∆°ng gi√°o vi√™n!",
    });
  }
};

/**
 * üíæ T·∫°o b·∫£ng l∆∞∆°ng (l∆∞u v√†o TeacherPayment)
 * POST /api/teacher-payments
 * Body: { month: 10, year: 2025, notes: "L∆∞∆°ng th√°ng 10" }
 */
const handleCreateTeacherPayments = async (req, res) => {
  try {
    const { month, year, notes } = req.body;

    if (!month || !year) {
      return res.status(400).json({
        errCode: 1,
        message: "Thi·∫øu d·ªØ li·ªáu th√°ng ho·∫∑c nƒÉm!",
      });
    }

    const data = await teacherMainPaymentService.createTeacherPayments(
      parseInt(month),
      parseInt(year),
      notes || ""
    );

    return res.status(201).json({
      errCode: 0,
      message: `T·∫°o b·∫£ng l∆∞∆°ng th√°ng ${month}/${year} th√†nh c√¥ng!`,
      data,
    });
  } catch (error) {
    console.error("‚ùå L·ªói khi t·∫°o b·∫£ng l∆∞∆°ng:", error);
    return res.status(500).json({
      errCode: 500,
      message: "L·ªói server khi t·∫°o b·∫£ng l∆∞∆°ng gi√°o vi√™n!",
    });
  }
};

/**
 * üîç Xem chi ti·∫øt l∆∞∆°ng 1 gi√°o vi√™n trong th√°ng c·ª• th·ªÉ
 * GET /api/teacher-payments/:teacherId?month=10&year=2025
 */
const handleGetTeacherSalaryDetail = async (req, res) => {
    try {
    const { teacherId } = req.params;
    const { month, year } = req.query;

    if (!teacherId || !month || !year) {
      return res.status(400).json({
        errCode: 1,
        message: "Thi·∫øu teacherId, month ho·∫∑c year!",
      });
    }

    // ‚úÖ L·∫•y tr·ª±c ti·∫øp t·ª´ TeacherPayment + TeacherPaymentDetail
    const teacherData = await teacherMainPaymentService.getTeacherSalaryDetail(
      parseInt(teacherId),
      parseInt(month),
      parseInt(year)
    );

    if (!teacherData) {
      return res.status(404).json({
        errCode: 2,
        message: "Kh√¥ng t√¨m th·∫•y th√¥ng tin l∆∞∆°ng c·ªßa gi√°o vi√™n n√†y!",
      });
    }

    return res.status(200).json({
      errCode: 0,
      message: "L·∫•y chi ti·∫øt l∆∞∆°ng gi√°o vi√™n th√†nh c√¥ng!",
      data: teacherData,
    });
  } catch (error) {
    console.error("‚ùå L·ªói khi xem chi ti·∫øt l∆∞∆°ng:", error);
    return res.status(500).json({
      errCode: 500,
      message: "L·ªói server khi xem chi ti·∫øt l∆∞∆°ng gi√°o vi√™n!",
    });
  }
};
const handlePayTeacherSalary = async (req, res) => {
  try {
    const { teacherId } = req.params;
    const { month, year } = req.body;

    const result = await teacherMainPaymentService.payTeacherSalary(
      parseInt(teacherId),
      parseInt(month),
      parseInt(year)
    );

    if (result.errCode === 1) return res.status(400).json(result);
    if (result.errCode === 2) return res.status(404).json(result);
    if (result.errCode === 3) return res.status(409).json(result);
    if (result.errCode === 500) return res.status(500).json(result);

    return res.status(200).json(result);
  } catch (err) {
    console.error("‚ùå L·ªói controller khi thanh to√°n:", err);
    return res.status(500).json({
      errCode: 500,
      message: "L·ªói controller khi thanh to√°n l∆∞∆°ng gi√°o vi√™n!",
    });
  }
};

export default {
  handleGetTeacherSalaries,
  handleCreateTeacherPayments,
  handleGetTeacherSalaryDetail,
  handlePayTeacherSalary,

};
